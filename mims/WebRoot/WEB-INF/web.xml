<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  <display-name>mims</display-name>
  
  <!-- 告知javaEE Web容器，有哪些内容需要添加到上下文中去 -->
  <!-- 
  	 	spring在web.xml中的配置
		
		
		在实际项目中spring的配置文件applicationcontext.xml是通过spring提供的加载机制，
		自动加载的容器中去，在web项目中，配置文件加载到web容器中进行解析，目前，spring提供了两种
		加载器，以供web容器的加载：一种是ContextLoaderListener，另一种是ContextLoaderServlet。
		这两种在功能上完全相同，只是一种是基于Servlet2.3版本中新引入的Listener接口实现，而另一种是基于
		Servlet接口实现，以下是这两种加载器在web.xml中的时机配置应用：
		
		第一种：
		<listener>
		 <listener-class>org.springframework.context.ContextLoaderListener</listener-class>
		</listener>
		
		
		另一种：
		<servlet>
		 <servlet-name>context</servlet-name>
		 <servlet-class>org.springframework.context.ContextLoaderServlet</servlet-class>
		 <load-on-startup>1</load-on-startup>
		</servlet>
		
		
		通过上面的配置，web容器会自动加载applicationcontext.xml初始化。
		如果需要指定配置文件的位置，可通过context-param加以指定：
		<context-param>
		 <param-name>contextConfigLocation</param-name>
		 <param-value>/WEB-INF/myApplicationContext.xml</param-value>
		</context-param>
		
		之后，可以通过
		
		WebApplicationContextUtils.getWebApplicationContext方法在web应用中获取applicationcontext的引用。
   -->
  <context-param>
  	<param-name>contextConfigLocation</param-name>
  	<param-value>
  		/WEB-INF/classes/spring/applicationContext.xml
  	</param-value>
  </context-param>
  
  <!-- 加载log4j -->
  <context-param>
  	<param-name>log4jConfigLocation</param-name>
  	<param-value>/WEB-INF/classes/log4j.xml</param-value>
  </context-param>
  
  <context-param>
  	<param-name>log4jRefreshInterval</param-name>
  	<param-value>60000</param-value>
  </context-param>
  
  <!-- 动态设置项目的运行路径 -->
  <context-param>
  	<param-name>webAppRootKey</param-name>
  	<param-value>ssm.root</param-value>
  </context-param>
  
  <!-- 配置静态资源 -->
  <!-- <servlet-mapping>
  	<servlet-name>default</servlet-name>
  	<url-pattern>/static/*</url-pattern>
  </servlet-mapping>
   -->
  <!-- 配置SpringMVC的前端控制器 -->
  <!-- The front controller of this Spring Web application, responsible for handling all application requests -->
	<servlet>
		<servlet-name>springDispatcherServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:spring/spring-mvc.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>

	<!-- Map all requests to the DispatcherServlet for handling -->
	<servlet-mapping>
		<servlet-name>springDispatcherServlet</servlet-name>
		<url-pattern>/*</url-pattern>
	</servlet-mapping>
  
  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.htm</welcome-file>
    <welcome-file>index.jsp</welcome-file>
  </welcome-file-list>
</web-app>